#!/home/vagrant/micromamba/envs/yfin-cli/bin/python

import argparse
import csv
import json
import os
import sqlite3
import subprocess
from datetime import datetime

import pandas as pd
import yfinance as yf

parser = argparse.ArgumentParser(prog="yf", description="yfinance cli")
parser.add_argument("ticker", help="stock ticker")
parser.add_argument("--info", help="stock information", action="store_true")
parser.add_argument("--calendar", help="calendar", action="store_true")
parser.add_argument("--analyst", help="analyst price targets", action="store_true")
parser.add_argument("--quart", help="quarterly income statement", action="store_true")
parser.add_argument("--history", help="stock price action", action="store_true")
parser.add_argument(
    "--options",
    nargs="*",
    metavar=("experation", "option_type"),
    help="option chain: optionally specify expiration date and option type ('calls' or 'puts')",
)
parser.add_argument("--csv", help="creates a csv file", action="store_true")
parser.add_argument("--pretty", help="enable pretty printing", action="store_true")
parser.add_argument("--fzf", help="enable fzf for selection", action="store_true")

args = parser.parse_args()


def pretty(data: dict):
    if args.pretty:
        if isinstance(data, pd.DataFrame):
            for col in data.columns:
                if pd.api.types.is_datetime64_any_dtype(data[col]):
                    data[col] = data[col].dt.strftime("%Y-%m-%d %H:%M:%S")
            data = data.to_dict(orient="records")
        return json.dumps(data, indent=4)
    else:
        return data


def fzf_select_from(items: list):
    if args.fzf:
        input_string = "\n".join(items)
        try:
            selected_item = subprocess.check_output(
                f"echo '{input_string}' | fzf",
                shell=True,
                text=True,
            ).strip()

            return selected_item

        except subprocess.CalledProcessError as e:
            print(e)
            return e.returncode
    else:
        return items


def handle_options(dat, option_args):
    expirations = dat.options
    option_types = ["calls", "puts"]

    if len(option_args) == 0:
        expiration = fzf_select_from(expirations)
        if not expiration:
            raise ValueError("No expiration date selected")

        if isinstance(expiration, str):
            option_type = fzf_select_from(option_types)
            if not option_type:
                raise ValueError("No expiration date selected")
            return getattr(dat.option_chain(expiration), option_type)

        return expiration

    if len(option_args) == 2:
        expiration = option_args[0]
        option_type = option_args[1]

        if expiration not in expirations:
            raise ValueError(f"Invalid expiration date: {expiration}")
        if option_type not in option_types:
            raise ValueError(f"Invalid option_type: {option_type}")

        return getattr(dat.option_chain(expiration), option_type)

    raise Exception("invalid arguments passed to --options, must be two or zero")


def csv_writer(json_data, file_name):
    if args.csv:
        print()
        print("=========== write output to csv ===========")
        if not isinstance(json_data, str):
            raise ValueError(
                f"\nBummer... you're trying to write a {type(json_data)} to csv.\ntry using --csv and --pretty together.\n"
            )
        data = json.loads(json_data)

        if not all(isinstance(item, dict) for item in data):
            provided_types = set(type(item) for item in data)
            raise ValueError(
                f"\nBummer... you can only write a list of dictionaries to the file.\nlooks like you provided a list of {provided_types}\n"
            )

        date_time_suffix = datetime.now().strftime("%Y-%m-%d_%H:%M:%S")

        current_dir = os.getcwd()
        output_file = os.path.join(current_dir, f"{file_name}_{date_time_suffix}.csv")

        with open(output_file, "w", newline="") as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=data[0].keys())
            writer.writeheader()
            writer.writerows(data)

        print(f"Data has been saved to '{output_file}'.")
        print("=========== write output to csv ===========")
        print()


dat = yf.Ticker(args.ticker.upper())
if args.info:
    print(pretty(dat.info))
elif args.calendar:
    calendar_dict = {key: str(value) for key, value in dat.calendar.items()}
    print(pretty(calendar_dict))
elif args.options is not None:
    try:
        option_data = handle_options(dat, args.options)
        this_is_json = pretty(option_data)
        print(this_is_json)
        csv_writer(this_is_json, "output")
    except Exception as e:
        print(e)
else:
    print(dat)
